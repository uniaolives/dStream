# dStream AI Agents - Docker Compose Configuration
# Updated: 21 de outubro de 2025

version: '3.8'

services:
  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dstream-ai-agents
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@db:5432/dstream
      - REDIS_URL=redis://redis:6379
      - NEXTAUTH_SECRET=your-production-secret-key
      - NEXTAUTH_URL=https://your-domain.com
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - dstream-network
    volumes:
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: dstream-db
    environment:
      - POSTGRES_DB=dstream
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - dstream-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: dstream-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - dstream-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: dstream-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - dstream-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  dstream-network:
    driver: bridge

# Development override
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
---
version: '3.8'

x-common-variables: &common-variables
  NODE_ENV: development
  DATABASE_URL: file:./dev.db
  NEXTAUTH_SECRET: dev-secret-key
  NEXTAUTH_URL: http://localhost:3000

services:
  app:
    <<: *common-variables
    build:
      context: .
      dockerfile: Dockerfile.dev
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev
    environment:
      <<: *common-variables